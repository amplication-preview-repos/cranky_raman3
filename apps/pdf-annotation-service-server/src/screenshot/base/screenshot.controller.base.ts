/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScreenshotService } from "../screenshot.service";
import { ScreenshotCreateInput } from "./ScreenshotCreateInput";
import { Screenshot } from "./Screenshot";
import { ScreenshotFindManyArgs } from "./ScreenshotFindManyArgs";
import { ScreenshotWhereUniqueInput } from "./ScreenshotWhereUniqueInput";
import { ScreenshotUpdateInput } from "./ScreenshotUpdateInput";

export class ScreenshotControllerBase {
  constructor(protected readonly service: ScreenshotService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Screenshot })
  async createScreenshot(
    @common.Body() data: ScreenshotCreateInput
  ): Promise<Screenshot> {
    return await this.service.createScreenshot({
      data: {
        ...data,

        pdf: data.pdf
          ? {
              connect: data.pdf,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        pdf: {
          select: {
            id: true,
          },
        },

        screenshotUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Screenshot] })
  @ApiNestedQuery(ScreenshotFindManyArgs)
  async screenshots(@common.Req() request: Request): Promise<Screenshot[]> {
    const args = plainToClass(ScreenshotFindManyArgs, request.query);
    return this.service.screenshots({
      ...args,
      select: {
        createdAt: true,
        id: true,

        pdf: {
          select: {
            id: true,
          },
        },

        screenshotUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Screenshot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async screenshot(
    @common.Param() params: ScreenshotWhereUniqueInput
  ): Promise<Screenshot | null> {
    const result = await this.service.screenshot({
      where: params,
      select: {
        createdAt: true,
        id: true,

        pdf: {
          select: {
            id: true,
          },
        },

        screenshotUrl: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Screenshot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScreenshot(
    @common.Param() params: ScreenshotWhereUniqueInput,
    @common.Body() data: ScreenshotUpdateInput
  ): Promise<Screenshot | null> {
    try {
      return await this.service.updateScreenshot({
        where: params,
        data: {
          ...data,

          pdf: data.pdf
            ? {
                connect: data.pdf,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          pdf: {
            select: {
              id: true,
            },
          },

          screenshotUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Screenshot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScreenshot(
    @common.Param() params: ScreenshotWhereUniqueInput
  ): Promise<Screenshot | null> {
    try {
      return await this.service.deleteScreenshot({
        where: params,
        select: {
          createdAt: true,
          id: true,

          pdf: {
            select: {
              id: true,
            },
          },

          screenshotUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
