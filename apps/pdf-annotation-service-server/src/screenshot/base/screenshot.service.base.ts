/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Screenshot as PrismaScreenshot,
  Pdf as PrismaPdf,
} from "@prisma/client";

export class ScreenshotServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScreenshotCountArgs, "select">
  ): Promise<number> {
    return this.prisma.screenshot.count(args);
  }

  async screenshots(
    args: Prisma.ScreenshotFindManyArgs
  ): Promise<PrismaScreenshot[]> {
    return this.prisma.screenshot.findMany(args);
  }
  async screenshot(
    args: Prisma.ScreenshotFindUniqueArgs
  ): Promise<PrismaScreenshot | null> {
    return this.prisma.screenshot.findUnique(args);
  }
  async createScreenshot(
    args: Prisma.ScreenshotCreateArgs
  ): Promise<PrismaScreenshot> {
    return this.prisma.screenshot.create(args);
  }
  async updateScreenshot(
    args: Prisma.ScreenshotUpdateArgs
  ): Promise<PrismaScreenshot> {
    return this.prisma.screenshot.update(args);
  }
  async deleteScreenshot(
    args: Prisma.ScreenshotDeleteArgs
  ): Promise<PrismaScreenshot> {
    return this.prisma.screenshot.delete(args);
  }

  async getPdf(parentId: string): Promise<PrismaPdf | null> {
    return this.prisma.screenshot
      .findUnique({
        where: { id: parentId },
      })
      .pdf();
  }
}
