/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Screenshot } from "./Screenshot";
import { ScreenshotCountArgs } from "./ScreenshotCountArgs";
import { ScreenshotFindManyArgs } from "./ScreenshotFindManyArgs";
import { ScreenshotFindUniqueArgs } from "./ScreenshotFindUniqueArgs";
import { CreateScreenshotArgs } from "./CreateScreenshotArgs";
import { UpdateScreenshotArgs } from "./UpdateScreenshotArgs";
import { DeleteScreenshotArgs } from "./DeleteScreenshotArgs";
import { Pdf } from "../../pdf/base/Pdf";
import { ScreenshotService } from "../screenshot.service";
@graphql.Resolver(() => Screenshot)
export class ScreenshotResolverBase {
  constructor(protected readonly service: ScreenshotService) {}

  async _screenshotsMeta(
    @graphql.Args() args: ScreenshotCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Screenshot])
  async screenshots(
    @graphql.Args() args: ScreenshotFindManyArgs
  ): Promise<Screenshot[]> {
    return this.service.screenshots(args);
  }

  @graphql.Query(() => Screenshot, { nullable: true })
  async screenshot(
    @graphql.Args() args: ScreenshotFindUniqueArgs
  ): Promise<Screenshot | null> {
    const result = await this.service.screenshot(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Screenshot)
  async createScreenshot(
    @graphql.Args() args: CreateScreenshotArgs
  ): Promise<Screenshot> {
    return await this.service.createScreenshot({
      ...args,
      data: {
        ...args.data,

        pdf: args.data.pdf
          ? {
              connect: args.data.pdf,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Screenshot)
  async updateScreenshot(
    @graphql.Args() args: UpdateScreenshotArgs
  ): Promise<Screenshot | null> {
    try {
      return await this.service.updateScreenshot({
        ...args,
        data: {
          ...args.data,

          pdf: args.data.pdf
            ? {
                connect: args.data.pdf,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Screenshot)
  async deleteScreenshot(
    @graphql.Args() args: DeleteScreenshotArgs
  ): Promise<Screenshot | null> {
    try {
      return await this.service.deleteScreenshot(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Pdf, {
    nullable: true,
    name: "pdf",
  })
  async getPdf(@graphql.Parent() parent: Screenshot): Promise<Pdf | null> {
    const result = await this.service.getPdf(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
